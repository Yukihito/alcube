#version 330 core

in vec3 eyeDirection_camera;
in vec3 normal_camera;
in vec2 UV;

out vec3 color;

uniform mat4 V;
uniform vec3 diffuse;
uniform vec3 ambient;
uniform vec3 specular;
uniform sampler2D textureSampler;

void main() {
  vec3 textureColor = texture(textureSampler, UV).rgb;
  float shininess = 2.0f;
  vec3 lightDirection_world = vec3(1.0f, 1.0f, 0.0f);
  vec3 lightDirection_camera = normalize((V * vec4(lightDirection_world, 0.0f)).xyz);
  vec3 e = normalize(eyeDirection_camera);
  vec3 n = normalize(normal_camera);
  float intensity = max(dot(n,lightDirection_camera), 0.0);
  vec3 spec = vec3(0.0f);
  if (intensity > 0.0f) {
    vec3 h = normalize(lightDirection_camera + eyeDirection_camera);
    float specularIntensity = max(dot(h, n), 0.0f);
    spec = specular * pow(specularIntensity, shininess);
  }
  color = max(intensity *  diffuse * textureColor + spec, ambient * textureColor);
}
